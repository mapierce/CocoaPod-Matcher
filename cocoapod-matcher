#!/usr/bin/env python

import os

class CONSTANTS:
	PODFILE="/Podfile"
	PODFILE_LOCK="/Podfile.lock"
	PODFILE_TMP="/Podfile.tmp"
	INSTALLED_POD_PREFIX="  - "
	DEPENDENCIES_STRING="DEPENDENCIES:\n"
	OPEN_BRACKET="("
	CLOSE_BRACKET=")"
	NEW_LINE="\n"
	POD_PREFIX="pod "

def check_directory_is_valid():
	script_path = os.getcwd()
	return os.path.isfile(script_path+CONSTANTS.PODFILE) and os.path.isfile(script_path+CONSTANTS.PODFILE_LOCK)

def read_podfile_lock():
	print("Reading Pod versions from lock file...")
	podfile_lock = open(os.getcwd()+CONSTANTS.PODFILE_LOCK, "r")
	lines = podfile_lock.readlines()
	dependencies_index = lines.index(CONSTANTS.DEPENDENCIES_STRING)
	valid_pods = list(filter(lambda x: x.startswith(CONSTANTS.INSTALLED_POD_PREFIX), lines[0:dependencies_index])) 
	pods = dict(map(lambda x: split_text_to_pod_and_version(x), valid_pods))
	podfile_lock.close()
	return pods

def update_podfile(versioned_pods):
	print("Updating Pod versions...")
	podfile = open(os.getcwd()+CONSTANTS.PODFILE, "r")
	updated_podfile = open(os.getcwd()+CONSTANTS.PODFILE_TMP, "w")
	for line in podfile.readlines():
		stripped_line = line.strip()
		if stripped_line.startswith(CONSTANTS.POD_PREFIX) and ", " not in stripped_line:
			unversioned_pod = stripped_line[stripped_line.index("'")+1:-1]
			updated_line = line.rstrip(CONSTANTS.NEW_LINE) + ", '" + versioned_pods[unversioned_pod] + "'" + CONSTANTS.NEW_LINE
			updated_podfile.write(updated_line)
		else :
			updated_podfile.write(line)

def overwrite_podfile():
	print("Writing to Podfile...")
	os.rename(os.getcwd()+CONSTANTS.PODFILE_TMP, os.getcwd()+CONSTANTS.PODFILE)

def split_text_to_pod_and_version(text):
	items = text.split(CONSTANTS.OPEN_BRACKET)
	pod_name = items[0].strip()[2:]
	pod_version = items[1].strip().split(CONSTANTS.CLOSE_BRACKET)[0]
	return pod_name, pod_version

if __name__ == "__main__":
	if check_directory_is_valid() is False:
		print("A Podfile and/or a Podfile.lock were not found in the current directory")
	else:
		print("Valid files found")
		update_podfile(read_podfile_lock())
		overwrite_podfile()
		print("Done")








